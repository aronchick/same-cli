- summary:
    - name: MyFirstSameRun
    - sha: a90eaf2
- infrastructure:
    - node_type: "Standard_D2s_v3" # VMs typically have GPU types associated
    - disk_per_node: 100Gi

#     type ManagedClusterAgentPoolProfileProperties struct {
# 	// Count - Number of agents (VMs) to host docker containers. Allowed values must be in the range of 0 to 100 (inclusive) for user pools and in the range of 1 to 100 (inclusive) for system pools. The default value is 1.
# 	Count *int32 `json:"count,omitempty"`
# 	// VMSize - Size of agent VMs. Possible values include: 'StandardA1', 'StandardA10', 'StandardA11', 'StandardA1V2', 'StandardA2', 'StandardA2V2', 'StandardA2mV2', 'StandardA3', 'StandardA4', 'StandardA4V2', 'StandardA4mV2', 'StandardA5', 'StandardA6', 'StandardA7', 'StandardA8', 'StandardA8V2', 'StandardA8mV2', 'StandardA9', 'StandardB2ms', 'StandardB2s', 'StandardB4ms', 'StandardB8ms', 'StandardD1', 'StandardD11', 'StandardD11V2', 'StandardD11V2Promo', 'StandardD12', 'StandardD12V2', 'StandardD12V2Promo', 'StandardD13', 'StandardD13V2', 'StandardD13V2Promo', 'StandardD14', 'StandardD14V2', 'StandardD14V2Promo', 'StandardD15V2', 'StandardD16V3', 'StandardD16sV3', 'StandardD1V2', 'StandardD2', 'StandardD2V2', 'StandardD2V2Promo', 'StandardD2V3', 'StandardD2sV3', 'StandardD3', 'StandardD32V3', 'StandardD32sV3', 'StandardD3V2', 'StandardD3V2Promo', 'StandardD4', 'StandardD4V2', 'StandardD4V2Promo', 'StandardD4V3', 'StandardD4sV3', 'StandardD5V2', 'StandardD5V2Promo', 'StandardD64V3', 'StandardD64sV3', 'StandardD8V3', 'StandardD8sV3', 'StandardDS1', 'StandardDS11', 'StandardDS11V2', 'StandardDS11V2Promo', 'StandardDS12', 'StandardDS12V2', 'StandardDS12V2Promo', 'StandardDS13', 'StandardDS132V2', 'StandardDS134V2', 'StandardDS13V2', 'StandardDS13V2Promo', 'StandardDS14', 'StandardDS144V2', 'StandardDS148V2', 'StandardDS14V2', 'StandardDS14V2Promo', 'StandardDS15V2', 'StandardDS1V2', 'StandardDS2', 'StandardDS2V2', 'StandardDS2V2Promo', 'StandardDS3', 'StandardDS3V2', 'StandardDS3V2Promo', 'StandardDS4', 'StandardDS4V2', 'StandardDS4V2Promo', 'StandardDS5V2', 'StandardDS5V2Promo', 'StandardE16V3', 'StandardE16sV3', 'StandardE2V3', 'StandardE2sV3', 'StandardE3216sV3', 'StandardE328sV3', 'StandardE32V3', 'StandardE32sV3', 'StandardE4V3', 'StandardE4sV3', 'StandardE6416sV3', 'StandardE6432sV3', 'StandardE64V3', 'StandardE64sV3', 'StandardE8V3', 'StandardE8sV3', 'StandardF1', 'StandardF16', 'StandardF16s', 'StandardF16sV2', 'StandardF1s', 'StandardF2', 'StandardF2s', 'StandardF2sV2', 'StandardF32sV2', 'StandardF4', 'StandardF4s', 'StandardF4sV2', 'StandardF64sV2', 'StandardF72sV2', 'StandardF8', 'StandardF8s', 'StandardF8sV2', 'StandardG1', 'StandardG2', 'StandardG3', 'StandardG4', 'StandardG5', 'StandardGS1', 'StandardGS2', 'StandardGS3', 'StandardGS4', 'StandardGS44', 'StandardGS48', 'StandardGS5', 'StandardGS516', 'StandardGS58', 'StandardH16', 'StandardH16m', 'StandardH16mr', 'StandardH16r', 'StandardH8', 'StandardH8m', 'StandardL16s', 'StandardL32s', 'StandardL4s', 'StandardL8s', 'StandardM12832ms', 'StandardM12864ms', 'StandardM128ms', 'StandardM128s', 'StandardM6416ms', 'StandardM6432ms', 'StandardM64ms', 'StandardM64s', 'StandardNC12', 'StandardNC12sV2', 'StandardNC12sV3', 'StandardNC24', 'StandardNC24r', 'StandardNC24rsV2', 'StandardNC24rsV3', 'StandardNC24sV2', 'StandardNC24sV3', 'StandardNC6', 'StandardNC6sV2', 'StandardNC6sV3', 'StandardND12s', 'StandardND24rs', 'StandardND24s', 'StandardND6s', 'StandardNV12', 'StandardNV24', 'StandardNV6'
# 	VMSize VMSizeTypes `json:"vmSize,omitempty"`
# 	// OsDiskSizeGB - OS Disk Size in GB to be used to specify the disk size for every machine in this master/agent pool. If you specify 0, it will apply the default osDisk size according to the vmSize specified.
# 	OsDiskSizeGB *int32 `json:"osDiskSizeGB,omitempty"`
# 	// OsDiskType - OS disk type to be used for machines in a given agent pool. Allowed values are 'Ephemeral' and 'Managed'. Defaults to 'Managed'. May not be changed after creation. Possible values include: 'Managed', 'Ephemeral'
# 	OsDiskType OSDiskType `json:"osDiskType,omitempty"`
# 	// VnetSubnetID - VNet SubnetID specifies the VNet's subnet identifier for nodes and maybe pods
# 	VnetSubnetID *string `json:"vnetSubnetID,omitempty"`
# 	// PodSubnetID - Pod SubnetID specifies the VNet's subnet identifier for pods.
# 	PodSubnetID *string `json:"podSubnetID,omitempty"`
# 	// MaxPods - Maximum number of pods that can run on a node.
# 	MaxPods *int32 `json:"maxPods,omitempty"`
# 	// OsType - OsType to be used to specify os type. Choose from Linux and Windows. Default to Linux. Possible values include: 'Linux', 'Windows'
# 	OsType OSType `json:"osType,omitempty"`
# 	// MaxCount - Maximum number of nodes for auto-scaling
# 	MaxCount *int32 `json:"maxCount,omitempty"`
# 	// MinCount - Minimum number of nodes for auto-scaling
# 	MinCount *int32 `json:"minCount,omitempty"`
# 	// EnableAutoScaling - Whether to enable auto-scaler
# 	EnableAutoScaling *bool `json:"enableAutoScaling,omitempty"`
# 	// Type - AgentPoolType represents types of an agent pool. Possible values include: 'VirtualMachineScaleSets', 'AvailabilitySet'
# 	Type AgentPoolType `json:"type,omitempty"`
# 	// Mode - AgentPoolMode represents mode of an agent pool. Possible values include: 'System', 'User'
# 	Mode AgentPoolMode `json:"mode,omitempty"`
# 	// OrchestratorVersion - Version of orchestrator specified when creating the managed cluster.
# 	OrchestratorVersion *string `json:"orchestratorVersion,omitempty"`
# 	// NodeImageVersion - READ-ONLY; Version of node image
# 	NodeImageVersion *string `json:"nodeImageVersion,omitempty"`
# 	// UpgradeSettings - Settings for upgrading the agentpool
# 	UpgradeSettings *AgentPoolUpgradeSettings `json:"upgradeSettings,omitempty"`
# 	// ProvisioningState - READ-ONLY; The current deployment or provisioning state, which only appears in the response.
# 	ProvisioningState *string `json:"provisioningState,omitempty"`
# 	// PowerState - READ-ONLY; Describes whether the Agent Pool is Running or Stopped
# 	PowerState *PowerState `json:"powerState,omitempty"`
# 	// AvailabilityZones - Availability zones for nodes. Must use VirtualMachineScaleSets AgentPoolType.
# 	AvailabilityZones *[]string `json:"availabilityZones,omitempty"`
# 	// EnableNodePublicIP - Enable public IP for nodes
# 	EnableNodePublicIP *bool `json:"enableNodePublicIP,omitempty"`
# 	// ScaleSetPriority - ScaleSetPriority to be used to specify virtual machine scale set priority. Default to regular. Possible values include: 'Spot', 'Regular'
# 	ScaleSetPriority ScaleSetPriority `json:"scaleSetPriority,omitempty"`
# 	// ScaleSetEvictionPolicy - ScaleSetEvictionPolicy to be used to specify eviction policy for Spot virtual machine scale set. Default to Delete. Possible values include: 'Delete', 'Deallocate'
# 	ScaleSetEvictionPolicy ScaleSetEvictionPolicy `json:"scaleSetEvictionPolicy,omitempty"`
# 	// SpotMaxPrice - SpotMaxPrice to be used to specify the maximum price you are willing to pay in US Dollars. Possible values are any decimal value greater than zero or -1 which indicates default price to be up-to on-demand.
# 	SpotMaxPrice *float64 `json:"spotMaxPrice,omitempty"`
# 	// Tags - Agent pool tags to be persisted on the agent pool virtual machine scale set.
# 	Tags map[string]*string `json:"tags"`
# 	// NodeLabels - Agent pool node labels to be persisted across all nodes in agent pool.
# 	NodeLabels map[string]*string `json:"nodeLabels"`
# 	// NodeTaints - Taints added to new nodes during node pool create and scale. For example, key=value:NoSchedule.
# 	NodeTaints *[]string `json:"nodeTaints,omitempty"`
# 	// ProximityPlacementGroupID - The ID for Proximity Placement Group.
# 	ProximityPlacementGroupID *string `json:"proximityPlacementGroupID,omitempty"`
# 	// KubeletConfig - KubeletConfig specifies the configuration of kubelet on agent nodes.
# 	KubeletConfig *KubeletConfig `json:"kubeletConfig,omitempty"`
# 	// LinuxOSConfig - LinuxOSConfig specifies the OS configuration of linux agent nodes.
# 	LinuxOSConfig *LinuxOSConfig `json:"linuxOSConfig,omitempty"`
# }
- kubeflow:
    - kubeflow_version: 1.2
    - services:
        - name: tf_crd
          version: 1.8
        - name: pytorch_crd
          version: 1.2
- data:
    - type: hosted
    - url: 