--- # ------------------------------------------------------------

# ------------------------------------------------------------
# Copyright (c) Microsoft Corporation.
# Licensed under the MIT License.
name: same

on:
  push:
    branches:
      - main
      - release-*
      - integration*
    tags:
      - v*
  pull_request:
    branches:
      - main
      - release-*
jobs:
  build:
    name: Build ${{ matrix.target_os }}_${{ matrix.target_arch }} binaries
    runs-on: ${{ matrix.os }}
    env:
      GOVER: 1.16
      GOLANGCILINT_VER: v1.37
      GOOS: ${{ matrix.target_os }}
      GOARCH: ${{ matrix.target_arch }}
      GOPROXY: https://proxy.golang.org
      ARCHIVE_OUTDIR: dist/archives
    strategy:
      fail-fast: false
      matrix:
        go-version: [1.16.2]
        os: [ubuntu-latest, macOS-latest]
        target_arch: [arm64, amd64]
        include:
          - os: ubuntu-latest
            target_os: linux
          - os: macOS-latest
            target_os: darwin
        exclude:
          - os: macOS-latest
            target_arch: arm
          - os: macOS-latest
            target_arch: arm64
    steps:
      # - uses: shogo82148/actions-mutex@v1
      #   with:
      #     key: TEST_MATRIX
      - name: Set up Go ${{ env.GOVER }}
        uses: actions/setup-go@v2
        with:
          go-version: ${{ env.GOVER }}
      - name: Set up Python 3.9
        uses: actions/setup-python@v2
        with:
          python-version: "3.9"
      - name: Install KFP Python SDK
        run: |
          pip3 install --upgrade pip
          pip3 install kfp
      - name: Install Jupytext
        run: |
          pip3 install jupytext
      - name: Install Docker CE for buildx
        if: matrix.target_os == 'linux' && github.event_name != 'pull_request'
        run: |
          sudo apt update
          sudo apt install apt-transport-https ca-certificates curl gnupg-agent software-properties-common
          curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
          sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"
          sudo apt update
          sudo apt install docker-ce
          docker -v
      - name: Check out code into the Go module directory
        uses: actions/checkout@v2
      - name: Parse release version and set REL_VERSION
        run: python ./.github/scripts/get_release_version.py
      - name: Install dependencies
        run: |
          go version
          echo ${{ env.GOARCH }}
      - name: golangci-lint
        if: matrix.target_arch == 'amd64' && matrix.target_os == 'linux'
        uses: golangci/golangci-lint-action@v2
        with:
          version: v1.37
          args: --timeout 10m
      - name: Run go mod tidy check diff
        if: matrix.target_arch == 'amd64' && matrix.target_os == 'linux'
        run: make modtidy check-diff
      - name: Install Kubectl
        if: matrix.target_os != 'darwin'
        run: |
          curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/${{ matrix.target_os }}/${{ matrix.target_arch }}/kubectl"
          mkdir -p $HOME/.local/bin
          mv ./kubectl $HOME/.local/bin/kubectl
          echo "$HOME/.local/bin/kubectl" >> $GITHUB_PATH
      - name: Install Kubectl (Mac)
        if: matrix.target_os == 'darwin'
        run: |
          curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/darwin/amd64/kubectl"
          chmod +x ./kubectl
          sudo mv ./kubectl /usr/local/bin/kubectl
          sudo chown root: /usr/local/bin/kubectl
          echo "/usr/local/bin/kubectl" >> $GITHUB_PATH
      - name: Set up Kubeconfig from Github Secret
        run: |
          mkdir -p $HOME/.kube
          echo "${{ secrets.CORE_TEAM_CLUSTER_KUBECONFIG }}" > $HOME/.kube/config
      - name: Run make test
        env:
          COVERAGE_OPTS: "-coverprofile=coverage.txt -covermode=atomic"
        if: matrix.target_arch == 'amd64'
        run: |
          export PATH=$PATH:$HOME/.local/bin
          make test
      - name: Codecov
        if: matrix.target_arch == 'amd64' && matrix.target_os == 'linux'
        uses: codecov/codecov-action@v1
      - name: Run make release to build and archive binaries
        run: |
          mkdir -p ${{ env.ARCHIVE_OUTDIR }}
          make release GOOS=${{ matrix.target_os }} GOARCH=${{ matrix.target_arch }} ARCHIVE_OUT_DIR=${{ env.ARCHIVE_OUTDIR }}
